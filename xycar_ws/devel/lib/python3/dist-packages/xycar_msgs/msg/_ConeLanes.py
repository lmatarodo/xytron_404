# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from xycar_msgs/ConeLanes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class ConeLanes(genpy.Message):
  _md5sum = "17f723016cb6dd916e265822742d21c5"
  _type = "xycar_msgs/ConeLanes"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# ConeLanes.msg

# 메시지 헤더 (타임스탬프, 프레임 ID 포함)
std_msgs/Header header

# 왼쪽 차선 감지 정보
bool left_lane_detected             # 왼쪽 차선 감지 성공 여부
geometry_msgs/Point[] left_lane_points  # 피팅된 왼쪽 차선의 샘플링 포인트 (x, y, z=0) 리스트
int8 left_lane_degree                   # 왼쪽 차선 피팅에 사용된 다항식 차수 (0이면 피팅 안됨 또는 실패)

# 오른쪽 차선 감지 정보
bool right_lane_detected            # 오른쪽 차선 감지 성공 여부
geometry_msgs/Point[] right_lane_points # 피팅된 오른쪽 차선의 샘플링 포인트 (x, y, z=0) 리스트
int8 right_lane_degree                  # 오른쪽 차선 피팅에 사용된 다항식 차수 (0이면 피팅 안됨 또는 실패)

# 중앙 주행 경로 및 제어 정보
geometry_msgs/Point[] center_path       # 계산된 주행 중앙 경로 포인트 (x, y, z=0) 리스트
float32 lateral_error                 # 차량의 횡방향 오차 (중앙 경로의 y=0에 가장 가까운 지점의 x값)
bool target_point_detected            # 제어 목표점 탐지 성공 여부
geometry_msgs/Point target_point      # 제어 목표점 좌표 (x, y, z=0)
float32 target_heading                # 제어 목표점에서의 경로 각도 (radian)
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','left_lane_detected','left_lane_points','left_lane_degree','right_lane_detected','right_lane_points','right_lane_degree','center_path','lateral_error','target_point_detected','target_point','target_heading']
  _slot_types = ['std_msgs/Header','bool','geometry_msgs/Point[]','int8','bool','geometry_msgs/Point[]','int8','geometry_msgs/Point[]','float32','bool','geometry_msgs/Point','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_lane_detected,left_lane_points,left_lane_degree,right_lane_detected,right_lane_points,right_lane_degree,center_path,lateral_error,target_point_detected,target_point,target_heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConeLanes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane_detected is None:
        self.left_lane_detected = False
      if self.left_lane_points is None:
        self.left_lane_points = []
      if self.left_lane_degree is None:
        self.left_lane_degree = 0
      if self.right_lane_detected is None:
        self.right_lane_detected = False
      if self.right_lane_points is None:
        self.right_lane_points = []
      if self.right_lane_degree is None:
        self.right_lane_degree = 0
      if self.center_path is None:
        self.center_path = []
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.target_point_detected is None:
        self.target_point_detected = False
      if self.target_point is None:
        self.target_point = geometry_msgs.msg.Point()
      if self.target_heading is None:
        self.target_heading = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.left_lane_detected = False
      self.left_lane_points = []
      self.left_lane_degree = 0
      self.right_lane_detected = False
      self.right_lane_points = []
      self.right_lane_degree = 0
      self.center_path = []
      self.lateral_error = 0.
      self.target_point_detected = False
      self.target_point = geometry_msgs.msg.Point()
      self.target_heading = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_lane_detected
      buff.write(_get_struct_B().pack(_x))
      length = len(self.left_lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_lane_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_bB().pack(_x.left_lane_degree, _x.right_lane_detected))
      length = len(self.right_lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_lane_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.right_lane_degree
      buff.write(_get_struct_b().pack(_x))
      length = len(self.center_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.center_path:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_fB3df().pack(_x.lateral_error, _x.target_point_detected, _x.target_point.x, _x.target_point.y, _x.target_point.z, _x.target_heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane_points is None:
        self.left_lane_points = None
      if self.right_lane_points is None:
        self.right_lane_points = None
      if self.center_path is None:
        self.center_path = None
      if self.target_point is None:
        self.target_point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.left_lane_detected,) = _get_struct_B().unpack(str[start:end])
      self.left_lane_detected = bool(self.left_lane_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_lane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_lane_points.append(val1)
      _x = self
      start = end
      end += 2
      (_x.left_lane_degree, _x.right_lane_detected,) = _get_struct_bB().unpack(str[start:end])
      self.right_lane_detected = bool(self.right_lane_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_lane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_lane_points.append(val1)
      start = end
      end += 1
      (self.right_lane_degree,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center_path = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.center_path.append(val1)
      _x = self
      start = end
      end += 33
      (_x.lateral_error, _x.target_point_detected, _x.target_point.x, _x.target_point.y, _x.target_point.z, _x.target_heading,) = _get_struct_fB3df().unpack(str[start:end])
      self.target_point_detected = bool(self.target_point_detected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_lane_detected
      buff.write(_get_struct_B().pack(_x))
      length = len(self.left_lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.left_lane_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_bB().pack(_x.left_lane_degree, _x.right_lane_detected))
      length = len(self.right_lane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.right_lane_points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.right_lane_degree
      buff.write(_get_struct_b().pack(_x))
      length = len(self.center_path)
      buff.write(_struct_I.pack(length))
      for val1 in self.center_path:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_fB3df().pack(_x.lateral_error, _x.target_point_detected, _x.target_point.x, _x.target_point.y, _x.target_point.z, _x.target_heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane_points is None:
        self.left_lane_points = None
      if self.right_lane_points is None:
        self.right_lane_points = None
      if self.center_path is None:
        self.center_path = None
      if self.target_point is None:
        self.target_point = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.left_lane_detected,) = _get_struct_B().unpack(str[start:end])
      self.left_lane_detected = bool(self.left_lane_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.left_lane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.left_lane_points.append(val1)
      _x = self
      start = end
      end += 2
      (_x.left_lane_degree, _x.right_lane_detected,) = _get_struct_bB().unpack(str[start:end])
      self.right_lane_detected = bool(self.right_lane_detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.right_lane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.right_lane_points.append(val1)
      start = end
      end += 1
      (self.right_lane_degree,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center_path = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.center_path.append(val1)
      _x = self
      start = end
      end += 33
      (_x.lateral_error, _x.target_point_detected, _x.target_point.x, _x.target_point.y, _x.target_point.z, _x.target_heading,) = _get_struct_fB3df().unpack(str[start:end])
      self.target_point_detected = bool(self.target_point_detected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_bB = None
def _get_struct_bB():
    global _struct_bB
    if _struct_bB is None:
        _struct_bB = struct.Struct("<bB")
    return _struct_bB
_struct_fB3df = None
def _get_struct_fB3df():
    global _struct_fB3df
    if _struct_fB3df is None:
        _struct_fB3df = struct.Struct("<fB3df")
    return _struct_fB3df
