// Generated by gencpp from file xycar_msgs/ConeLanes.msg
// DO NOT EDIT!


#ifndef XYCAR_MSGS_MESSAGE_CONELANES_H
#define XYCAR_MSGS_MESSAGE_CONELANES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace xycar_msgs
{
template <class ContainerAllocator>
struct ConeLanes_
{
  typedef ConeLanes_<ContainerAllocator> Type;

  ConeLanes_()
    : header()
    , center_path()
    , lateral_error(0.0)
    , target_point_detected(false)
    , target_point()
    , target_heading(0.0)
    , left_lane_detected(false)
    , right_lane_detected(false)
    , left_lane_degree(0.0)
    , right_lane_degree(0.0)
    , left_lane_points()
    , right_lane_points()  {
    }
  ConeLanes_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , center_path(_alloc)
    , lateral_error(0.0)
    , target_point_detected(false)
    , target_point(_alloc)
    , target_heading(0.0)
    , left_lane_detected(false)
    , right_lane_detected(false)
    , left_lane_degree(0.0)
    , right_lane_degree(0.0)
    , left_lane_points(_alloc)
    , right_lane_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _center_path_type;
  _center_path_type center_path;

   typedef float _lateral_error_type;
  _lateral_error_type lateral_error;

   typedef uint8_t _target_point_detected_type;
  _target_point_detected_type target_point_detected;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_point_type;
  _target_point_type target_point;

   typedef float _target_heading_type;
  _target_heading_type target_heading;

   typedef uint8_t _left_lane_detected_type;
  _left_lane_detected_type left_lane_detected;

   typedef uint8_t _right_lane_detected_type;
  _right_lane_detected_type right_lane_detected;

   typedef float _left_lane_degree_type;
  _left_lane_degree_type left_lane_degree;

   typedef float _right_lane_degree_type;
  _right_lane_degree_type right_lane_degree;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _left_lane_points_type;
  _left_lane_points_type left_lane_points;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _right_lane_points_type;
  _right_lane_points_type right_lane_points;





  typedef boost::shared_ptr< ::xycar_msgs::ConeLanes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xycar_msgs::ConeLanes_<ContainerAllocator> const> ConstPtr;

}; // struct ConeLanes_

typedef ::xycar_msgs::ConeLanes_<std::allocator<void> > ConeLanes;

typedef boost::shared_ptr< ::xycar_msgs::ConeLanes > ConeLanesPtr;
typedef boost::shared_ptr< ::xycar_msgs::ConeLanes const> ConeLanesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xycar_msgs::ConeLanes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xycar_msgs::ConeLanes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xycar_msgs::ConeLanes_<ContainerAllocator1> & lhs, const ::xycar_msgs::ConeLanes_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.center_path == rhs.center_path &&
    lhs.lateral_error == rhs.lateral_error &&
    lhs.target_point_detected == rhs.target_point_detected &&
    lhs.target_point == rhs.target_point &&
    lhs.target_heading == rhs.target_heading &&
    lhs.left_lane_detected == rhs.left_lane_detected &&
    lhs.right_lane_detected == rhs.right_lane_detected &&
    lhs.left_lane_degree == rhs.left_lane_degree &&
    lhs.right_lane_degree == rhs.right_lane_degree &&
    lhs.left_lane_points == rhs.left_lane_points &&
    lhs.right_lane_points == rhs.right_lane_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xycar_msgs::ConeLanes_<ContainerAllocator1> & lhs, const ::xycar_msgs::ConeLanes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xycar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xycar_msgs::ConeLanes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xycar_msgs::ConeLanes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xycar_msgs::ConeLanes_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d95ea1cfb987f44e10d98bcddc53d76";
  }

  static const char* value(const ::xycar_msgs::ConeLanes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d95ea1cfb987f44ULL;
  static const uint64_t static_value2 = 0xe10d98bcddc53d76ULL;
};

template<class ContainerAllocator>
struct DataType< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xycar_msgs/ConeLanes";
  }

  static const char* value(const ::xycar_msgs::ConeLanes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 콘 레인 정보를 담는 메시지 타입\n"
"\n"
"# 메시지 헤더\n"
"std_msgs/Header header\n"
"\n"
"# 중앙 경로 포인트들\n"
"geometry_msgs/Point[] center_path\n"
"\n"
"# 횡방향 오차 (차량 중심과 경로 중심 사이의 거리)\n"
"float32 lateral_error\n"
"\n"
"# 목표 지점 감지 여부\n"
"bool target_point_detected\n"
"\n"
"# 목표 지점 좌표\n"
"geometry_msgs/Point target_point\n"
"\n"
"# 목표 지점에서의 경로 방향 (radian)\n"
"float32 target_heading\n"
"\n"
"# 왼쪽 차선 감지 여부\n"
"bool left_lane_detected\n"
"\n"
"# 오른쪽 차선 감지 여부\n"
"bool right_lane_detected\n"
"\n"
"# 왼쪽 차선 각도 (degree)\n"
"float32 left_lane_degree\n"
"\n"
"# 오른쪽 차선 각도 (degree)\n"
"float32 right_lane_degree\n"
"\n"
"# 왼쪽 차선 포인트들\n"
"geometry_msgs/Point[] left_lane_points\n"
"\n"
"# 오른쪽 차선 포인트들\n"
"geometry_msgs/Point[] right_lane_points \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::xycar_msgs::ConeLanes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.center_path);
      stream.next(m.lateral_error);
      stream.next(m.target_point_detected);
      stream.next(m.target_point);
      stream.next(m.target_heading);
      stream.next(m.left_lane_detected);
      stream.next(m.right_lane_detected);
      stream.next(m.left_lane_degree);
      stream.next(m.right_lane_degree);
      stream.next(m.left_lane_points);
      stream.next(m.right_lane_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeLanes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xycar_msgs::ConeLanes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xycar_msgs::ConeLanes_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "center_path[]" << std::endl;
    for (size_t i = 0; i < v.center_path.size(); ++i)
    {
      s << indent << "  center_path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.center_path[i]);
    }
    s << indent << "lateral_error: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_error);
    s << indent << "target_point_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_point_detected);
    s << indent << "target_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target_point);
    s << indent << "target_heading: ";
    Printer<float>::stream(s, indent + "  ", v.target_heading);
    s << indent << "left_lane_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_lane_detected);
    s << indent << "right_lane_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_lane_detected);
    s << indent << "left_lane_degree: ";
    Printer<float>::stream(s, indent + "  ", v.left_lane_degree);
    s << indent << "right_lane_degree: ";
    Printer<float>::stream(s, indent + "  ", v.right_lane_degree);
    s << indent << "left_lane_points[]" << std::endl;
    for (size_t i = 0; i < v.left_lane_points.size(); ++i)
    {
      s << indent << "  left_lane_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_lane_points[i]);
    }
    s << indent << "right_lane_points[]" << std::endl;
    for (size_t i = 0; i < v.right_lane_points.size(); ++i)
    {
      s << indent << "  right_lane_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_lane_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // XYCAR_MSGS_MESSAGE_CONELANES_H
