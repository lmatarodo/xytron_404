// Generated by gencpp from file xycar_msgs/laneinfo.msg
// DO NOT EDIT!


#ifndef XYCAR_MSGS_MESSAGE_LANEINFO_H
#define XYCAR_MSGS_MESSAGE_LANEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xycar_msgs
{
template <class ContainerAllocator>
struct laneinfo_
{
  typedef laneinfo_<ContainerAllocator> Type;

  laneinfo_()
    : left_x(0.0)
    , left_y(0.0)
    , left_slope(0.0)
    , right_x(0.0)
    , right_y(0.0)
    , right_slope(0.0)
    , lane_number(0)
    , cone_detected_flag(false)  {
    }
  laneinfo_(const ContainerAllocator& _alloc)
    : left_x(0.0)
    , left_y(0.0)
    , left_slope(0.0)
    , right_x(0.0)
    , right_y(0.0)
    , right_slope(0.0)
    , lane_number(0)
    , cone_detected_flag(false)  {
  (void)_alloc;
    }



   typedef float _left_x_type;
  _left_x_type left_x;

   typedef float _left_y_type;
  _left_y_type left_y;

   typedef float _left_slope_type;
  _left_slope_type left_slope;

   typedef float _right_x_type;
  _right_x_type right_x;

   typedef float _right_y_type;
  _right_y_type right_y;

   typedef float _right_slope_type;
  _right_slope_type right_slope;

   typedef int32_t _lane_number_type;
  _lane_number_type lane_number;

   typedef uint8_t _cone_detected_flag_type;
  _cone_detected_flag_type cone_detected_flag;





  typedef boost::shared_ptr< ::xycar_msgs::laneinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xycar_msgs::laneinfo_<ContainerAllocator> const> ConstPtr;

}; // struct laneinfo_

typedef ::xycar_msgs::laneinfo_<std::allocator<void> > laneinfo;

typedef boost::shared_ptr< ::xycar_msgs::laneinfo > laneinfoPtr;
typedef boost::shared_ptr< ::xycar_msgs::laneinfo const> laneinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xycar_msgs::laneinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xycar_msgs::laneinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xycar_msgs::laneinfo_<ContainerAllocator1> & lhs, const ::xycar_msgs::laneinfo_<ContainerAllocator2> & rhs)
{
  return lhs.left_x == rhs.left_x &&
    lhs.left_y == rhs.left_y &&
    lhs.left_slope == rhs.left_slope &&
    lhs.right_x == rhs.right_x &&
    lhs.right_y == rhs.right_y &&
    lhs.right_slope == rhs.right_slope &&
    lhs.lane_number == rhs.lane_number &&
    lhs.cone_detected_flag == rhs.cone_detected_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xycar_msgs::laneinfo_<ContainerAllocator1> & lhs, const ::xycar_msgs::laneinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xycar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xycar_msgs::laneinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xycar_msgs::laneinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xycar_msgs::laneinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xycar_msgs::laneinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xycar_msgs::laneinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xycar_msgs::laneinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xycar_msgs::laneinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80e7564081aa5c4a700b9b80391fcc78";
  }

  static const char* value(const ::xycar_msgs::laneinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80e7564081aa5c4aULL;
  static const uint64_t static_value2 = 0x700b9b80391fcc78ULL;
};

template<class ContainerAllocator>
struct DataType< ::xycar_msgs::laneinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xycar_msgs/laneinfo";
  }

  static const char* value(const ::xycar_msgs::laneinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xycar_msgs::laneinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_x\n"
"float32 left_y\n"
"float32 left_slope\n"
"float32 right_x\n"
"float32 right_y\n"
"float32 right_slope\n"
"int32 lane_number  # 1: 1차선, 2: 2차선 \n"
"bool cone_detected_flag\n"
;
  }

  static const char* value(const ::xycar_msgs::laneinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xycar_msgs::laneinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_x);
      stream.next(m.left_y);
      stream.next(m.left_slope);
      stream.next(m.right_x);
      stream.next(m.right_y);
      stream.next(m.right_slope);
      stream.next(m.lane_number);
      stream.next(m.cone_detected_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct laneinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xycar_msgs::laneinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xycar_msgs::laneinfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "left_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "left_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "left_slope: ";
    Printer<float>::stream(s, indent + "  ", v.left_slope);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "right_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "right_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "right_slope: ";
    Printer<float>::stream(s, indent + "  ", v.right_slope);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "lane_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_number);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cone_detected_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cone_detected_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XYCAR_MSGS_MESSAGE_LANEINFO_H
